#include "dcl.h"
/*int prevTokenExists = 0;*/
int nexttoken(void)
{
  prevTokenExists = 1;
  return gettoken();
}

main()    /* convert word description to declaration */
{
  int type;
  char temp[MAXTOKEN];

  while (gettoken() != EOF)   {
    strcpy(out, token);
    while ((type = gettoken()) != '\n') {
      work:
      if (type == PARENS || type == BRACKETS)
        strcat(out, token);
      else if (type == '*') {
        /* test the NEXT token, without actually putting it in the buffer */
        if ((type = nexttoken()) == PARENS || type == BRACKETS)  {
          /* explanation: the only operators with precedence over the (unary) * operation
           * are BRACKETS, PARENS and the -> operator.  If the next token is one of these
           * we will need to wrap the pointer operation and operand in parens to force the 
           * precedence specified in the input. (note: -> is not supported in our gettoken()
           */
          sprintf(temp, "(*%s)", out);
          strcat(out, token);
        }
        else  {
          sprintf(temp, "*%s", out);
        }
        strcpy(out, temp);
      } else if (type == NAME)  {
        sprintf(temp, "%s %s", token, out);
        strcpy(out, temp);
      } else 
        printf("invalid input at %s\n", token);
      }
      printf("%s\n", out);
  }
  return 0;
}
#include "dcl.h"
int prevTokenExists = 0;
int gettoken(void)    /* return next token */
{
  int c, getch(void);
  void ungetch(int);
  char *p = token;

  if (prevTokenExists == 1)  {
    prevTokenExists = 0;
    return tokentype;
  }

  while ((c = getch()) == ' ' || c == '\t')
    ;

  if (c == '(') {
    if ((c = getch()) == ')') {
      strcpy(token, "()");
      return tokentype = PARENS;
    } else  {
      ungetch(c);
      return tokentype = '(';
    }
  } else if (c == '[')  {
    for (*p++ = c; (*p++ = getch()) != ']'; )
      ;
    *p = '\0';
    return tokentype = BRACKETS;
  } else if (isalpha(c))  {
    for (*p++ = c; isalnum(c = getch()); )
      *p++ = c;
    *p = '\0';
    ungetch(c);
    return tokentype = NAME;
  } else
    return tokentype = c;
}
#include "dcl.h"

#define BUFSIZE 100

char buf[BUFSIZE]; /* buffer for ungetch */
int bufp = 0; /* next free position in buf */

int getch(void) /* get a (possibly pushed back) character */
{
  return (bufp > 0) ? buf[--bufp] : getchar();
}

void ungetch(int c) /* push character back on input */
{
  if(bufp >= BUFSIZE)
    printf("ungetch: too many characters\n");
  else
    buf[bufp++] = c;
}



